ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# install all the packages
packages <- c("GGally", "spatstat", "dismo", "MASS", "ggplot2", "plyr", "sp", "maps", "maptools", "raster", "geostatsp", "rgdal")
ipak(packages)
# set the working directory
setwd("~/shp")
# set the working directory
setwd("C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/shp")
getwd
getwd ()
# set the projection
BNG = "+init=epsg:25829"
# add the study area
studyarea <- readShapePoly("study_area.shp", proj4string = CRS(BNG))
# install all the packages
packages <- c("GGally", "spatstat", "dismo", "MASS", "ggplot2", "plyr", "sp", "maps", "maptools", "raster", "geostatsp", "rgdal")
ipak(packages)
# set the working directory
setwd("C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/shp")
# set the projection
BNG = "+init=epsg:25829"
# add the study area
studyarea <- readShapePoly("study_area.shp", proj4string = CRS(BNG))
# and check it is worked
plot(studyarea)
# add the sites
sites <- readShapePoints("sites.shp", proj4string = CRS(BNG))
studyarea <- readShapePoly("study_area.shp", proj4string = CRS(BNG))
# and check it is worked
plot(studyarea)
studyarea <- readOGR(dsn="study_area.shp", proj4string = CRS(BNG))
studyarea <- readOGR(dsn="study_area.shp", proj4string = CRS(BNG))
studyarea <- readOGR(dsn="study_area.shp", layer= "studyarea")
knitr::opts_chunk$set(eval = FALSE,
echo = TRUE)
# ad the shapefile
locations <- readOGR(dsn="locations.shp", layer="locations")
# set the working directory
setwd("~/shp")
locations <- readOGR(dsn="locations.shp", layer="locations")
studyarea <- readOGR(dsn="study_area.shp", layer="studyarea")
# set the working directory
setwd("C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/shp")
# add the study area
studyarea <- readOGR(dsn="study_area.shp", layer="studyarea")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# install all the packages
packages <- c("GGally", "spatstat", "dismo", "MASS", "ggplot2", "plyr", "sp", "maps", "maptools", "raster", "geostatsp", "rgdal")
ipak(packages)
install.packages(geostatsp)
install.packages("geostatsp")
# install all the packages
packages <- c("GGally", "spatstat", "dismo", "MASS", "ggplot2", "plyr", "sp", "maps", "maptools", "raster", "geostatsp", "rgdal")
ipak(packages)
library(geostatsp)
install.packages("geostatsp")
library(geostatsp)
# add the study area
studyarea <- readOGR(dsn="study_area.shp", layer="studyarea")
# set the working directory
setwd("C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/shp")
# set the projection
BNG = "+init=epsg:25829"
# add the study area
studyarea <- readOGR(dsn="study_area.shp", proj4string = CRS(BNG), layer="studyarea")
# add the study area
studyarea <- readOGR(dsn="study_area.shp", layer="studyarea")
library(rgdal)
# add the study area
studyarea <- readOGR(dsn="study_area.shp", layer="studyarea")
ogrInfo
# add the sites
sites <- readShapePoints("sites.shp", proj4string = CRS(BNG))
# add the random points
random_sites <- readShapePoints("random_sites.shp", proj4string = CRS(BNG))
rgdal::readOGR
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
knitr::opts_chunk$set(eval = FALSE,
echo = TRUE)
# install all the packages
packages <- c("GGally", "spatstat", "dismo", "MASS", "ggplot2", "plyr", "sp", "maps", "maptools", "raster", "geostatsp", "rgdal")
ipak(packages)
# set the working directory
setwd("C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/shp")
# set the projection
BNG = "+init=epsg:25829"
# add the study area
studyarea <- readShapePoly("Study_area.shp", proj4string = CRS(BNG))
studyarea <- readOGR(dsn="study_area.shp", layer="study_area")
# add the study area
studyarea <- readShapePoly("C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/shp/Study_area.shp", proj4string = CRS(BNG))
# and check it is worked
plot(studyarea)
# add the sites
sites <- readShapePoints("C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/shp/sites.shp", proj4string = CRS(BNG))
# add the random points
random_sites <- readShapePoints("C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/shp/random_sites.shp", proj4string = CRS(BNG))
# plot the studyarea and the sites and check everything looks ok
plot(sites, col="blue", pch=20, add=T)
# add the sites
sites <- readShapePoints("C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/shp/sites.shp", proj4string = CRS(BNG))
# plot the studyarea and the sites and check everything looks ok
plot(sites, col="blue", pch=20, add=T)
# remove any sites with the same grid reference
sites <- remove.duplicates(sites)
# select the points inside the studyarea
sitesSub <- sites[studyarea,]
# check to see that they have been removed
plot(studyarea)
plot(sitesSub, col="red", pch=20, add=T)
dev.off()
# set a window as the studyarea
window <- as.owin(studyarea)
plot(window)
# create a ppp object
sitesSub.ppp <- ppp(x=sitesSub$UTMX,y=sitesSub$UTMY,window=window)
# set the simulations
sims <- 99
# to get 95% envelope
nrank <- round((sims + 1) / 100 * 2.5, 0)
# K, L and G functions
Kfunction <- envelope(sitesSub.ppp,Kest, nsim=sims,rank=nrank, correction="best")
KinhomFunction <- envelope(sitesSub.ppp,Kinhom, nsim=sims,rank=nrank, correction="best")
LFunction <- envelope(sitesSub.ppp,Lest, nsim=sims,rank=nrank, correction="best")
LinhomFunction <- envelope(sitesSub.ppp,Linhom, nsim=sims,rank=nrank, correction="best")
GFunction <- envelope(sitesSub.ppp,Gest, nsim=sims,rank=nrank, correction="best")
GinhomFunction <- envelope(sitesSub.ppp,Ginhom, nsim=sims,rank=nrank, correction="best")
# create Figure 2
par(mar=c(4, 4, 4, 4), mfrow=c(3,2))
plot(Kfunction,main="a. K Function (homogeneous)",legend=FALSE)
plot(KinhomFunction,main="b. K Function (inhomogeneous)",legend=FALSE)
plot(LFunction,main="c. L Function (homogeneous)",legend=FALSE)
plot(LinhomFunction,main="d. L Function (inhomogeneous)",legend=FALSE)
plot(GFunction,main="e. G Function (homogeneous)",legend=FALSE)
plot(GinhomFunction,main="f. G Function (inhomogeneous)",legend=FALSE)
par(mfrow=c(1,1))
png(file = "C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/figures/Figure2.png",width = 900,height = 1200)
dev.off()
# create Figure 2
par(mar=c(4, 4, 4, 4), mfrow=c(3,2))
plot(Kfunction,main="a. K Function (homogeneous)",legend=FALSE)
plot(KinhomFunction,main="b. K Function (inhomogeneous)",legend=FALSE)
plot(LFunction,main="c. L Function (homogeneous)",legend=FALSE)
plot(LinhomFunction,main="d. L Function (inhomogeneous)",legend=FALSE)
plot(GFunction,main="e. G Function (homogeneous)",legend=FALSE)
plot(GinhomFunction,main="f. G Function (inhomogeneous)",legend=FALSE)
par(mfrow=c(1,1))
png(file = "C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/figures/Figure2.png",width = 900,height = 1200)
# Set the working directory
setwd("C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/xls")
# import data
dat <- read.table(file="dat.csv",header=TRUE, sep=";", stringsAsFactors=F, dec=".")
# Set the working directory
setwd("C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/csv")
# import data
dat <- read.table(file="dat.csv",header=TRUE, sep=";", stringsAsFactors=F, dec=".")
# Set the working directory
setwd("C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/xls")
# import data
dat <- read.table(file="dat.xls",header=TRUE, sep=";", stringsAsFactors=F, dec=".")
# import data
dat <- read.table(file="C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/xls/dat.xls",header=TRUE, sep=";", stringsAsFactors=F, dec=".")
# import data
dat <- read.table(file="C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/csv/dat.csv",header=TRUE, sep=";", stringsAsFactors=F, dec=".")
# Data
sample_data <- data.frame(v1=dat$altitude,v2=dat$wetland_cost,v3=dat$goat_cost,v5=dat$geology_cost,v6=dat$hydrology_cost,v7=dat$lcp_cost,v8=dat$eucl_dist_geo,v9=dat$eucl_dist_hydro,v10=dat$dif_ins,v11=dat$dir_ins,v12=dat$tot_ins,v13=dat$aspect,v14=dat$slope,v15=dat$vis_prom,v16=dat$tpi100,v17=dat$tpi500,v18=dat$tpi1000,v19=dat$wind)
# Check correlations
cor(sample_data)
# Check correlations as scatterplots, distributions and correlation coefficient.
ggpairs(sample_data)
# Visualization
ggcorr(sample_data, method=c("everything", "pearson"))
# Export file
png(file = "C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/figures/Figure3.png",width = 900,height = 1200)
# Export file
png(file = "C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/figures/Figure3.png",width = 1200,height = 900)
sample_data <- data.frame(v1=dat$altitude,v2=dat$wetland_cost,v3=dat$goat_cost,v4=dat$geology_cost,v5=dat$hydrology_cost,v6=dat$lcp_cost,v7=dat$eucl_dist_geo,v8=dat$eucl_dist_hydro,v9=dat$dif_ins,v10=dat$dir_ins,v11=dat$tot_ins,v12=dat$aspect,v13=dat$slope,v14=dat$vis_prom,v15=dat$tpi100,v16=dat$tpi500,v17=dat$tpi1000,v18=dat$wind)
cor(sample_data)
ggpairs(sample_data)
ggcorr(sample_data, method=c("everything", "pearson"))
png(file = "C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/figures/Figure3.png",width = 900,height = 1200)
dev.off()
# set the working directory
setwd("C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/shp")
# ad the shapefile
locations <- readOGR(dsn="locations.shp", layer="locations")
# ad the shapefile
locations <- readOGR(dsn="C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/SHP/locations.shp", layer="locations")
# ad the shapefile
locations <- readOGR(dsn="C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/shp/locations.shp", layer="locations")
# set the working directory
setwd("C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/grids")
# Import variables and set the same extent for everyone
elevation <- raster("dem_monforte.tif")
# Import variables and set the same extent for everyone
elevation <- raster("C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/grids/dem_monforte.tif")
tot_ins <- raster("C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/grids/total_insolation_monforte.asc")
tot_inso <- projectRaster(tot_ins, elevation)
asp <- raster("C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/grids/aspect_monforte.tif")
aspect <- projectRaster(asp, elevation)
slop <- raster("C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/grids/slope_monforte.tif")
slope <- projectRaster(slop, elevation)
slope <- projectRaster(slop, elevation)
vis_prom <- raster("visual_prominence_monforte.tif")
vis_prom <- raster("C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/grids/visual_prominence_monforte.tif")
visual_prom <- projectRaster(vis_prom, elevation)
tpi100_monf <- raster("C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/grids/tpi100_monforte.asc")
tpi100 <- projectRaster(tpi100_monf, elevation)
tpi500_monf <- raster("C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/grids/tpi500_monforte.asc")
tpi500 <- projectRaster(tpi500_monf, elevation)
wind_monf <- raster("C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/grids/wind_monforte.asc")
wind <- projectRaster(wind_monf, elevation)
wetland_c <- raster("C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/grids/wetland_cost_monforte.tiff")
wetland_cost <- projectRaster(wetland_c, elevation)
wetland_cost <- projectRaster(wetland_c, elevation)
goat_c <- raster("goat_cost_monforte.tiff")
goat_c <- raster("C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/grids/goat_cost_monforte.tiff")
goat_cost <- projectRaster(goat_c, elevation)
geol_c <- raster("C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/grids/geology_cost_monforte.tiff")
geol_cost <- projectRaster(geol_c, elevation)
hydro_c <- raster("C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/grids/hydrology_cost_monforte.tiff")
hydro_cost <- projectRaster(hydro_c, elevation)
hydro_cost <- projectRaster(hydro_c, elevation)
lcp_c <- raster("lcp_cost_monforte.tiff")
lcp_c <- raster("C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/grids/lcp_cost_monforte.tiff")
lcp_cost <- projectRaster(lcp_c, elevation)
dist_eucl_geo <- raster("C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/grids/distancia_euclidiana_geologia_monforte2.tif")
dist_eucl_geo <- raster("C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/grids/distancia_euclidiana_geologia_monforte2.tif")
# GLM creation
covariates <- stack(elevation, tot_inso, aspect, slope, visual_prom, tpi100, wetland_cost, geol_cost, hydro_cost, lcp_cost, wind, tpi500)
names(covariates) <- c("elevation", "tot_inso", "aspect", "slope", "visual_prom", "tpi100", "wetland_cost", "geol_cost","hydro_cost", "lcp_cost", "wind", "tpi500")
locvals <- data.frame(extract(covariates, locations))
locvals$site <- locations$CID==1
mod <- glm(site~elevation+tot_inso+aspect+slope+visual_prom+tpi100+wetland_cost+geol_cost+hydro_cost+lcp_cost+wind+tpi500, data=locvals, family=binomial(logit))
summary(mod)
mod2 <- stepAIC(mod)  # More oncs
mod2$anova
# Table with the results of predictive analysis
summary(mod2)
# GLM creation
covariates <- stack(elevation, tot_inso, aspect, slope, visual_prom, tpi100, wetland_cost, geol_cost, hydro_cost, lcp_cost, wind, goat_cost)
names(covariates) <- c("elevation", "tot_inso", "aspect", "slope", "visual_prom", "tpi100", "wetland_cost", "geol_cost","hydro_cost", "lcp_cost", "wind", "goat_cost")
locvals <- data.frame(extract(covariates, locations))
locvals$site <- locations$CID==1
mod <- glm(site~elevation+tot_inso+aspect+slope+visual_prom+tpi100+wetland_cost+geol_cost+hydro_cost+lcp_cost+wind+goat_cost, data=locvals, family=binomial(logit))
summary(mod)
mod2 <- stepAIC(mod)  # More oncs
mod2$anova
# Table with the results of predictive analysis
summary(mod2)
logodds <- 7.2294176+(elevation* -0.0167014)+(slope*-0.3456405)+(visual_prom*0.0458370)+(wetland_cost*-0.0017355)+(hydro_cost*0.0007585)
par(mfrow=c(1,1))
plot(logodds)
# Predictive map creation
relprob <- (exp(logodds))/(1+(exp(logodds)))
par(mfrow=c(1,1))
plot(relprob, col=terrain.colors(8, alpha=1), legend=TRUE, axes=TRUE, main="GLM Monforte")
points(locations[locations$CID==1,], pch=19, cex=0.3, col="red")
plot(relprob, col=terrain.colors(8, alpha=1), legend=TRUE, axes=TRUE, main="GLM Monforte")
points(locations[locations$CID==1,], pch=19, cex=0.3, col="red")
plot(relprob, col=terrain.colors(8, alpha=1), legend=TRUE, axes=TRUE, main="Predict surface")
points(locations[locations$CID==1,], pch=19, cex=0.3, col="red")
View(locations)
plot(relprob, col=terrain.colors(8, alpha=1), legend=TRUE, axes=TRUE, main="Predict intensity surface")
points(locations[locations$CID==1,], pch=19, cex=0.3, col="red")
plot(relprob, col=terrain.colors(8, alpha=1), legend=TRUE, axes=TRUE, main="Predictive intensity surface")
points(locations[locations$CID==1,], pch=19, cex=0.3, col="red")
writeRaster(relprob,filename = "predicsurface2.asc", datatype="ascii", overwrite=TRUE)
# Output predictive surface .asc
writeRaster(relprob,filename = "C:/Users/Mikel/Documents/Curso_2020-2021/Articulo_Monforte_QI/Github/patterns_monforte/grids/predicsurface2.asc", datatype="ascii", overwrite=TRUE)
